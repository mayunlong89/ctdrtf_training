

#@-2024-03-28

#@@@---Yunlong Ma
#@@@---E-mail: yunlong.ma@pennmedicine.upenn.edu

#@-ctDRTF tools
###--------------------------------------------------------------------------------------
#@(1) Constructing global TF-gene regulatory network
#single_cell: the input single-cell data--Seurat object
#n_genes: the minimum number of genes in a given regulon

grn_tf <- function(single_cell = single_cell,n_genes=n_genes){
  # Select variable features
  single_cell <- Seurat::FindVariableFeatures(single_cell, assay='RNA')
  # Initiate GRN object and select candidate regions
  single_cell <- Pando::initiate_grn(single_cell)
  # Scan candidate regions for TF binding motifs
  single_cell <- Pando::find_motifs(
    single_cell,
    pfm = motifs,
    genome = BSgenome.Hsapiens.UCSC.hg38
  )
  
  "
  Integrating single-cell transcriptomics and chromatin accessibility to construct GRN
   
  "
  
  # Infer gene regulatory network
  grn_object <- Pando::infer_grn(single_cell)
  
  # Find modules
  grn_object <- Pando::find_modules(grn_object)
  
  # Module extraction
  regulons <- Pando::NetworkModules(grn_object)
  
  # Extracting GRN
  data_regulons <- data.frame(regulons@meta$tf,regulons@meta$target)
  
  # Regulons with genes less than 10 were removed
  temp <- data.frame(table(data_regulons[,1]))
  temp <- temp[which(temp$Freq > n_genes-1),]
  
  # Number of TFs that construct number-matched regulons
  tf_left <- as.vector(temp$Var1)
  
  # All regulons remaining in the GRN
  data_regulons1 <- data_regulons[!is.na(match(data_regulons$regulons.meta.tf,tf_left)),]
  
  # Outputs
  grn_outputs <- list(grn=data_regulons1,tf_names = tf_left)
  
  return(grn_outputs)
}

###--------------------------------------------------------------------------------------


###--------------------------------------------------------------------------------------
#@ 2) Calculating specificity scores
#single_cell is the input single-cell data.
#num_genes <- length(rownames(single_cell))

gene_cosr <- function(single_cell = single_cell){
  
  #Calculating the specificity scores of TFs and targeting genes across all cell types
  
  #All genes in single-cell data 
  num_genes <- length(rownames(single_cell))
  
  #COSG::cosg()
  celltype_markers <- COSG::cosg(single_cell,
                                 groups = "all",
                                 assay = "RNA",
                                 slot = "data",
                                 mu=1,
                                 n_genes_user = num_genes) #number of genes used for analysis
  
  
  
  #extracting cell type names
  all_celltype_names <- colnames(celltype_markers$names)
  
  ##-----Extracting the specificity score of each gene or TF in a given regulon
  #Empty data.frame
  data_s1 <- data.frame(matrix(ncol = 3, nrow = 0))
  names(data_s1) <- c("genes","scores","celltypes")
  for (i in 1:length(all_celltype_names)){
    
    data_s <- data.frame(celltype_markers$names[i],celltype_markers$scores[i])
    data_s[,3] <- rep(all_celltype_names[i],length(data_s[,1]))
    names(data_s) <- c("genes","scores","celltypes")
    
    #collecting all the cell types
    data_s1 <- rbind(data_s1,data_s)
  }
  
  #If specificity score = -1, transforming -1 to 0
  #data_s1[,2][which(data_s1[,2] == -1)] <- 0
  
  return(data_s1)
  
}
###--------------------------------------------------------------------------------------


###--------------------------------------------------------------------------------------
#@ 3) Identifying cell type-specific regulons relevant to disease

#MAGMA_GWAS_data: all MAGMA-based associations results ranked by -log10(P)
#data_regulons1: TF-gene pairs matrix
#tf_left: all tf names
#MC_num: Set 100 times of running MC_JSI_score_func()
#data_s1: matrix of genes and TFs specificity scores across cell types
#theta range from 0 ~ 1, default set to 0.5


ct_drtf <- function(tf_left=tf_left,
                      data_s1=data_s1,
                      data_regulons1=data_regulons1,
                      MAGMA_GWAS_data = MAGMA_GWAS_data,
                      MC_num = 100,
                      Gene_num=500,
                      theta=0.5){
  
  #Name all regulons
  regulon_names <- data.frame(paste(tf_left,"_regulon",sep = ""))
  #tf_left: the vector of all TFs 
  #Specificity score of each regulon in a particular cell type
  #Output file
  #Collecting specificity scores
  Final_regulon_s <- data.frame(matrix(ncol = 1, nrow = length(tf_left)))
  names(Final_regulon_s)<-"ID_regulon"
  Final_regulon_s$ID_regulon <- tf_left
  
  #Collecting specificity*JSI for each regulon-disease link
  Final_regulon_ct_score<- data.frame(matrix(ncol = 1, nrow = length(tf_left)))
  names(Final_regulon_ct_score)<-"ID_regulon"
  Final_regulon_ct_score$ID_regulon <- tf_left
  
  #Collecting MC P value for each regulon-disease link
  Final_regulon_ct_mc_p<- data.frame(matrix(ncol = 1, nrow = length(tf_left)))
  names(Final_regulon_ct_mc_p)<-"ID_regulon"
  Final_regulon_ct_mc_p$ID_regulon <- tf_left
  
  #Obtain all names of the cell types
  all_celltype_names <- unique(data_s1[,3])
  
  "
   Using the COSR method to calculate the specificity scores (S) of TF-regulons;

   Using disease-specific genes and regulons weighted by S to identify cell type-specific TFs relevant to disease

   "
  #Open progress bar
  pb <- txtProgressBar(style=3)
  start_time <- Sys.time() ##record start time
  
  # description a function for max-min normalization for specificity score
  max_min_scale <- function(x){
    
    scale_vec <- (x-min(x))/(max(x)-min(x))
    
    return(scale_vec)
    
  }
  
  data_s1 <- max_min_scale(data_s1)
  
  
  #COSR and JSI interaction analysis
  for (i in 1:length(all_celltype_names)){
    regulon_ct_score <- c()
    regulon_ct_mc_p <- c()
    regulon_s_all <-c()
    #p <- 0
    for (j in 1:length(tf_left)){
      
      #extracting the gene list of each regulon
      M1 <- data_regulons1[which(data_regulons1$regulons.meta.tf == tf_left[j]),]
      M1_regulon <- c(unique(M1$regulons.meta.tf),M1$regulons.meta.target)
      
      data_s1_sub <- data_s1[which(data_s1[,3] == all_celltype_names[i]),]
      #extracting the specificity score of each regulon
      data_s_M1 <- data_s1_sub[!is.na(match(data_s1_sub[,1], M1_regulon)),]
      #data_s_M1$anno <- rep("Gene",n_num,length(data_s_M1[,1]))
      data_s_M1$anno <- rep("Gene", length(data_s_M1[,1]))
      data_s_M1$anno[which(data_s_M1[,1] == M1_regulon[1])] <- "TF"
      
      #Calculating the module specificity score for each regulon
      tf_s <- data_s_M1[,2][which(data_s_M1[,1] == M1_regulon[1])]
      ave_s <- mean(data_s_M1[,2][which(data_s_M1[,1] != M1_regulon[1])])
      #theta = 0.5  #theta range from 0 ~ 1, default set to 0.5
      regulon_s <- tf_s + theta*ave_s #regulon-specific score for each cell type
      
      #Sum
      regulon_s_all <- c(regulon_s_all,regulon_s)
      
      #Calculating the Jaccard Similarity Index (JSI)
      top_genes <- MAGMA_GWAS_data$SYMBOL[1:500]
      inter_genes1 <- length(intersect(top_genes,M1_regulon))
      union_genes1 <- length(union(top_genes,M1_regulon))
      JSI1 <- inter_genes1/union_genes1 # Jaccard similarity index
      
      #Interaction: specificity*JSI for each regulon-disease link
      ct_score <- regulon_s*JSI1
      
      #MC simulation for random specificity*JSI scores
      #Function: MC_JSI_score_func()
      #MC_num = 100
      tf_left_1 <- tf_left[which(tf_left!=tf_left[j])] #removing the targeted TF as controls
      len_of_regulon = length(M1_regulon)
      all_genes <- MAGMA_GWAS_data$SYMBOL
      MC_results <- replicate(MC_num,MC_JSI_score_func(data_s1_sub,
                                                       tf_left_1, 
                                                       len_of_regulon,
                                                       all_genes,
                                                       Gene_num))
      
      #Calculating the MC p-values
      MC_p <- (1+length(MC_results[MC_results>ct_score]))/(1+length(MC_results))
      
      #Running
      print(paste("Running the regulon of ",tf_left[j], " for the cell type of ",all_celltype_names[i],sep = ""))
      #Running percent:
      #p=p+1
      #print(paste("Finished percent: ",p/length(tf_left)))
      
      
      #Saving results
      regulon_ct_score <- c(regulon_ct_score,ct_score)
      regulon_ct_mc_p <- c(regulon_ct_mc_p,MC_p)
      
      
    }
    #Real-time progress bar
    #print(paste("Runing percent: ",percent((i+j)/(length(all_celltype_names)*length(tf_left))),sep = ""))
    setTxtProgressBar(pb,(i+j)/(length(all_celltype_names)*length(tf_left)))
    
    #Collecting specificity scores
    regulon_s_all<- as.data.frame(regulon_s_all)
    names(regulon_s_all) <- all_celltype_names[i]
    Final_regulon_s <- cbind(Final_regulon_s,regulon_s_all)
    
    #Collecting MC P values
    regulon_ct_mc_p<- as.data.frame(regulon_ct_mc_p)
    names(regulon_ct_mc_p) <- all_celltype_names[i]
    Final_regulon_ct_mc_p <- cbind(Final_regulon_ct_mc_p,regulon_ct_mc_p)
    
    
    #Normalization
    regulon_ct_score_norm <- (regulon_ct_score-mean(regulon_ct_score))/sd(regulon_ct_score)
    
    #Collecting specificity*JSI for each regulon-disease link
    regulon_ct_score_norm <- as.data.frame(regulon_ct_score_norm)
    names(regulon_ct_score_norm) <- all_celltype_names[i]
    Final_regulon_ct_score <- cbind(Final_regulon_ct_score,regulon_ct_score_norm)
    
    
  }
  
  ##Record end time
  end_time <- Sys.time() 
  
  #Close progress bar
  close(pb)
  
  #Calculating the running time
  run_time <- end_time - start_time
  
  #Outputs
  out_results <- list(ctDRTF_score = Final_regulon_ct_score, 
                      MC_p = Final_regulon_ct_mc_p,
                      regulon_specificity_s=Final_regulon_s)
  
  return(out_results)
  
}
###--------------------------------------------------------------------------------------


###--------------------------------------------------------------------------------------
#main function
#single_cell: the input single-cell data.
#n_genes: the minimum number of genes in a given regulon 
#MAGMA_GWAS_data: all MAGMA-based associations results ranked by -log10(P)
#Gene_num: The number of disease-specific genes, default set to 500
#MC_num: Set 100 times of running MC_JSI_score_func()
#theta range from 0 ~ 1, default set to 0.5
ctdf_main <- function(single_cell = single_cell,
                           MAGMA_GWAS_data = MAGMA_GWAS_data,
                           n_genes= 10,
                           Gene_num = 500,
                           MC_num = 100,
                           theta=0.5){
  
  #1) Constructing global TF-gene regulatory network
  
  grn_outputs <- GRN_func(single_cell,n_genes = n_genes)
  
  #grn_outputs <- list(grn=data_regulons1,tf_names = tf_left)
  
  
  #2) Calculating specicity scores
  data_s1 <- COSR_pre_func(single_cell) 
  
  #3) Identifying cell type-specific regulons relevant to disease
  final_results <- COSR_func(tf_left=grn_outputs$tf_names,
                             data_s1=data_s1,
                             data_regulons1=grn_outputs$grn,
                             MAGMA_GWAS_data = MAGMA_GWAS_data)
  
  #4) Outputs
  return(final_results)
}





















